// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Westpac.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("KiwiSaverRetirementCalculator")]
    public partial class KiwiSaverRetirementCalculatorFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "KiwiSaverRetirementCalculator.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "KiwiSaverRetirementCalculator", "As a Product Owner\r\nI want that the KiwiSaver Retirement Calculator users are abl" +
                    "e to calculate what their KiwiSaver projected balance would be at retirement\r\nSo" +
                    " that the users are able to plan their investments better.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("KiwiSaver retirement projection is displayed for different user profiles - using " +
            "json")]
        [NUnit.Framework.CategoryAttribute("prod")]
        [NUnit.Framework.TestCaseAttribute("Employed Persona 1", null)]
        [NUnit.Framework.TestCaseAttribute("Self-employed Persona 1", null)]
        [NUnit.Framework.TestCaseAttribute("Not employed Persona 1", null)]
        public virtual void KiwiSaverRetirementProjectionIsDisplayedForDifferentUserProfiles_UsingJson(string persona, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "prod"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Persona", persona);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("KiwiSaver retirement projection is displayed for different user profiles - using " +
                    "json", null, tagsOfScenario, argumentsOfScenario);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
 testRunner.Given("I am in the KiwiSaver Retirement Calculator Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
 testRunner.When(string.Format("I fill up the calculator with my user profile as {0}", persona), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
 testRunner.Then("I am able to calculate my projected balances at retirement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("KiwiSaver retirement projection is displayed for different user profiles - using " +
            "scenario outline")]
        [NUnit.Framework.CategoryAttribute("prod")]
        [NUnit.Framework.TestCaseAttribute("30", "Employed", "82000", "4%", "", "", "", "Defensive", "", null)]
        [NUnit.Framework.TestCaseAttribute("45", "Self-employed", "", "", "100000", "90", "Fortnightly", "Conservative", "290000", null)]
        [NUnit.Framework.TestCaseAttribute("55", "Not employed", "", "", "140000", "10", "Annually", "Balanced", "200000", null)]
        public virtual void KiwiSaverRetirementProjectionIsDisplayedForDifferentUserProfiles_UsingScenarioOutline(string currentAge, string employmentStatus, string salary, string kiwiSaverMemberContribution, string currentKiwiSaverBalance, string voluntaryContributions, string frequency, string riskProfile, string savingsGoalAtRetirement, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "prod"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Current Age", currentAge);
            argumentsOfScenario.Add("Employment Status", employmentStatus);
            argumentsOfScenario.Add("Salary", salary);
            argumentsOfScenario.Add("KiwiSaver Member Contribution", kiwiSaverMemberContribution);
            argumentsOfScenario.Add("Current KiwiSaver Balance", currentKiwiSaverBalance);
            argumentsOfScenario.Add("Voluntary Contributions", voluntaryContributions);
            argumentsOfScenario.Add("Frequency", frequency);
            argumentsOfScenario.Add("Risk Profile", riskProfile);
            argumentsOfScenario.Add("Savings Goal At Retirement", savingsGoalAtRetirement);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("KiwiSaver retirement projection is displayed for different user profiles - using " +
                    "scenario outline", null, tagsOfScenario, argumentsOfScenario);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
 testRunner.Given("I am in the KiwiSaver Retirement Calculator Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 23
 testRunner.When(string.Format("I enter {0} in Current age", currentAge), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
 testRunner.And(string.Format("I select {0} in Employment status", employmentStatus), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.And(string.Format("I enter {0} in Salary", salary), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.And(string.Format("I select {0} in KiwiSaver member contribution", kiwiSaverMemberContribution), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.And(string.Format("I enter {0} in Current KiwiSaver balance", currentKiwiSaverBalance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.And(string.Format("I enter {0} in Voluntary contributions", voluntaryContributions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.And(string.Format("I select {0} in Frequency", frequency), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.And(string.Format("I select {0} in Risk profile", riskProfile), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.And(string.Format("I enter {0} in Savings goal at retirement", savingsGoalAtRetirement), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.Then("I am able to calculate my projected balances at retirement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
